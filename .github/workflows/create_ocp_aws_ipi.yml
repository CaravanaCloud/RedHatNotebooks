# git commit --allow-empty -am "Updated ocp ipi workflow $(date)" && git push
# gh workflow run provision_ocp_ipi.yml -f dry_run="false" -f instance_type="t3.2xlarge"
name: Provision cluster using OCP IPI

on:
  workflow_dispatch:
    inputs:
      dry_run:
        type: string
        description: dry run
        required: false
        default: 'true'
      instance_type:
        type: string
        description: instance type to create
        required: false
        default: 'm5.2xlarge'

  workflow_call:
    inputs:
      dry_run:
        type: string
        description: dry run
        required: false
        default: 'true'
      instance_type:
        type: string
        description: instance type to create
        required: false
        default: 'm5.2xlarge'
    outputs:
      cluster_name:
        description: Generated cluster name
        value: ${{ jobs.create-cluster.outputs.cluster_name }}
    secrets:
      OCP_AWS_REGION:
        required: true
      PULL_SECRET:
        required: true
      OCP_BASE_DOMAIN:
        required: true
      OCP_SSH_KEY:
        required: true
      OCP_AWS_ACCESS_KEY_ID:
        required: true
      OCP_AWS_SECRET_ACCESS_KEY:
        required: true
      FILE_KEY:
        required: true

env:
  OCP_INSTALL_DIR: /tmp/install-dir
  OCP_INSTALL_CONFIG: /tmp/install-dir/install-config.yaml
  OCP_INSTALL_TEMPLATE: ./provisioning/install_config.tpl.yaml
  PULL_SECRET: ${{ secrets.PULL_SECRET }}
  OCP_BASE_DOMAIN: ${{ secrets.OCP_BASE_DOMAIN }}
  OCP_SSH_KEY: ${{ secrets.OCP_SSH_KEY }}
  OCP_AWS_REGION: ${{ secrets.OCP_AWS_REGION }}
  OCP_ARCH: amd64
  OCP_WORKER_REPLICAS: 3
  OCP_WORKER_TYPE: t3.2xlarge
  OCP_CONTROL_TYPE: t3.2xlarge
  OCP_CONTROL_REPLICAS: 3
  OCP_DRY_RUN: ${{ inputs.dry_run }}
  OCP_INSTANCE_TYPE: ${{ inputs.instance_type ||  github.event.inputs.instance_type }}

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    
    outputs:
      cluster_name: ${{ steps.generate-cluster-name.outputs.value }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.OCP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.OCP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.OCP_AWS_REGION}}

      - name: Check AWS Credentials
        run: aws sts get-caller-identity

      - id: generate-cluster-name
        run: echo "::set-output name=value::rhnb-$RANDOM"

      - name: Debug Variables
        run: echo "CLUSTER_NAME=$CLUSTER_NAME"
        env:
          CLUSTER_NAME: ${{ steps.generate-cluster-name.outputs.value }}

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Download OpenShift Installer
        env:
          INSTALL_URL: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-install-linux.tar.gz
          INSTALL_DIR: /tmp/openshift-installer
          INSTALL_FILE: /tmp/openshift-installer/openshift-install-linux.tar.gz
          INSTALL_TARGET: /tmp/openshift-installer/openshift-install
          INSTALL_PATH: /usr/local/bin/
        run: |
          echo "Downloading openshift-installer"
          mkdir -p "$INSTALL_DIR"
          wget -nv -O "$INSTALL_FILE" "$INSTALL_URL"
          tar zxvf "$INSTALL_FILE" -C "$INSTALL_DIR"
          sudo mv  "$INSTALL_TARGET" "$INSTALL_PATH" 
          rm "$INSTALL_FILE"

      - name: Check Openshift Installer
        run: openshift-install version

      - name: Create install dir
        run: mkdir -p "$OCP_INSTALL_DIR"

      - name: Generate install config
        run: envsubst < "$OCP_INSTALL_TEMPLATE" > "$OCP_INSTALL_CONFIG"
        env:
          OCP_NAME: ${{ steps.generate-cluster-name.outputs.value }}

      - name: Encrypt Install Config
        run: openssl enc -e -a -aes256 -pbkdf2 -k ${{ secrets.FILE_KEY }} -in "$OCP_INSTALL_CONFIG" -out "${OCP_INSTALL_CONFIG}.enc"

      #      - name: Decrypt Install Config
      #        run: openssl enc -e -a -aes256 -pbkdf2 -k ${{ secrets.FILE_KEY }} -d -in "${OCP_INSTALL_CONFIG}.enc" -out "${OCP_INSTALL_CONFIG}.dec"

      - name: Preserve encrypted install config
        uses: actions/upload-artifact@v3
        with:
          name: install-config.yaml.enc
          path: "${{ env.OCP_INSTALL_CONFIG }}.enc"
          retention-days: 14

      - name: Create cluster
        if: ${{ inputs.dry_run == 'false' ||  github.event.inputs.dry_run == 'false' }}
        env:
          LOG_LEVEL: info
        run: openshift-install create cluster --dir "$OCP_INSTALL_DIR" --log-level=$LOG_LEVEL

      - name: Bundle encrypted install dir
        if: ${{ inputs.dry_run == 'false' ||  github.event.inputs.dry_run == 'false' }}
        working-directory: ${{ env.OCP_INSTALL_DIR }}
        run: |
          echo "-- bundle"
          tar -czvf "/tmp/install-dir.tar.gz" "."
          echo "-- check"
          tar -ztvf /tmp/install-dir.tar.gz
          echo "-- version"
          openssl version
          echo "-- encrypt"
          openssl enc -aes-256-cbc -a -salt -pbkdf2 -k "${{ secrets.FILE_KEY }}" -in "/tmp/install-dir.tar.gz" -out "/tmp/install-dir.tar.gz.enc"
          echo "-- try decrypt"
          openssl enc -aes-256-cbc -d -a -pbkdf2 -k ${{ secrets.FILE_KEY }} -in "/tmp/install-dir.tar.gz.enc" -out "/tmp/install-dir.tar.gz.dec"
          echo "-- check decrypt"
          tar tzvf /tmp/install-dir.tar.gz.dec
          echo "-- bundle done"

      - name: Store encrypted install-dir
        if: ${{ inputs.dry_run == 'false' ||  github.event.inputs.dry_run == 'false' }}
        uses: actions/upload-artifact@v3
        with:
          name: install-dir.tar.gz.enc
          path: /tmp/install-dir.tar.gz.enc
          retention-days: 7
